####Exercises
>  Using proper pseudo-code, describe the following primitive algorithms:
    -  Making coffee;
    //I use a Moka Pot with hand grinder
      Class MokaPot
        this.tank;
        this.basket;

        new method disassemble()
          Take apart MokaPot into three main pieces
        end method

        new method assemble()
          Put MokaPot back together
        end method
      end class definition

      Class HandGrinder
        new method grind()
          rotate hand clockwise until all fill is ground
        end method
      end class definition

      Function fill(item, filler)
        put filler into item until item is full
      end function

      Function cook(item, heat)
        place item on stove
        turn on stove to heat level
      end function

      Function stopCook(item)
        remove item from stove
        turn off stove
      end function

      Function makeCoffee
        MokaPot.disassemble()
        fill(MokaPot.tank, "water")
        cook(MokaPot.tank, "low")
        fill(HandGrinder. "coffee beans")
        handGrinder.grind()
        fill(MokaPot.filter, "coffee grounds")
        if (MokaPot.tank = "boiling")
          stopCook(MokaPot.tank)
          MokaPot.assemble()
          cook(MokaPot)
          if (MokaPot = "filled")
            stopCook(MokaPot)
            fill("cup", "coffee")
          end if
        end if
      end function

    -  Washing dishes;
      Class sponge
        this.soaped = false;
      end class definition

      Class dish
        this.scrubbed = false;
        this.clean = false;
      end class definition

      Class faucet
        this.on = false;
      end class definition

      Function scrub(dish)
        set dish.scrubbed = true;
      end class definition

      Function rinse(dish)
        if (faucet.on = true)
          Run dish under the sink faucet
        else
          set faucet.on = true
          Run dish under the sink faucet
        end if
      end function

      Function washDishes(dishes)
        set sponge.soaped = true
        rinse(sponge)
        for (i = 0; i < dishes.length; i++)
          set dishes[i].scrubbed = true
        end for loop
        for (i = 0; i < dishes.length; i++)
          rinse(dishes[i])
          set dishes[i].clean = true
          dishRack.push(dishes[i])
        end for loop
      end function

    -  A choice of your own.
    //Cooking Rice
      Class RicePot
        this.load = 0
      end class definition

      Class RiceCooker
        this.setting = null
        this.on = false
        this.done = false
      end class definition

      Function rinse(item)
        if (faucet.on = true)
          Run item under the sink faucet
        else
          set faucet.on = true
          Run item under the sink faucet
        end if
      end function

      Function strain(item)
        pour only water out
      end function

      Function fill(cups, item)
        pour cups*1.5 cups of water into item
      end function

      Function cookRice(cups)
        RicePot.load = cups
        for (i = 0; i < 3; i++)
          rinse(RicePot)
          strain(RicePot)
        end for loop
        fill(cups,RicePot)
        put RicePot into RiceCooker
        set RiceCooker.setting = "White Rice"
        set RiceCooker.on = true
        while RiceCooker.done = false
          wait
        end while
      end function

>  As with the knot algorithm, there may be more than one way to solve the problem. It is essential to try to pick the best algorithm for a situation. Name three companies who created an algorithm that made them successful, e.g., Google's search algorithm. It doesn't need to be a tech example (such as a recipe or manufacturing a product). Google's algorithm produces more relevant results than other search engines; what about each of your cases make them stand out?
A:
  1. Toyota's Lean Manufacturing methodology allowed them to outcompete American brands on pricing, customization, and speed to delivery
  2. Disney's Marvel Cinematic Universe movies follow a certain formula with a mix of action, humor, drama, sci-fi, suspense, and other elements that have not only made each movie a financial success, but critical success as well
  3. Coca-Cola's recipe is famously unique, however, it still adapts to local cultures' favored flavors (some countries a little sweeter, others more bitter)

>  Hypothesize about what constitutes an efficient algorithm versus an inefficient algorithm.
A: An efficient algorithm spends less time or resources to get to the solution of a problem versus an inefficient algorithm. Furthermore,
  algorithms can get complex very quickly depending on the variables or amount of data. Efficient algorithms tend to stay within the same
  magnitude of resources spent whereas inefficient algorithms can exponentially increase in magnitude of cost.
