####Exercises
>A line of people at an amusement park ride.

The line is composed of members, represented as strings.
There is a front to the line, as well as a back.
When someone enters the line, place them at the end.
People may leave the line whenever they see fit, and those behind them take their place.
Given the above real-world information, use an array data structure to code the following solution.

a) Use an array input: ["Vivian", "Ava", "Josh", "Patrick", "Mike"]
b) Insert a new person, "Mary" at the end of the line. In other words, you should insert Mary after Mike.
c) Find a person in line named "Josh." This function should return the position of 2 in the array, (recall that arrays are 0-based).
d) Find a person in line named "Emily." What should your function return if it does not find the item in the array?
e) What if Ava wants to allow a friend, "Melissa", to cut in line in front of her? How would you code this so Melissa appears before Ava?
f) If Patrick wants to leave the line, how would you delete him from the array?

A:
a) var rideLine = ["Vivian", "Ava", "Josh", "Patrick", "Mike"];

b) rideLine.push("Mary");

c)
function whereIsPerson(person) {
  return (rideLine.findIndex(position => position === person));
}

let whereIsJosh = whereisPerson("Josh");

d) let whereIsEmily = whereisPerson("Emily");
This should return "undefined" since Emily is not in line

e)
let whereIsAva = whereisPerson("Ava");
rideLine.splice(whereIsAva,0,"Emily");

f)
let whereIsPatrick = whereIsPerson("Patrick");
rideLine.splice(whereIsPatrick,1);


Provide another real-world example that you can model using a data structure.

A: A Deck of cards or hand. This example would leverage arrays as a shuffled (randomly sorted) deck of cards. Dealing and draw would start with index 0 and be inserted into separate arrays for hands.

How would your data structure allow developers to access and manipulate the data?

A: This data structure allows developers to shuffle, draw, deal, and ensure the integrity of the deck (one of each card). Additionally, developers can also cut decks (slice and concat), add multiple decks, and assign value to cards based on the game.
