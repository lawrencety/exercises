####Exercises
> What is a binary tree and what makes it unique to other trees?

A: A binary tree is a specific type of tree that each node has at most 2 child nodes.

> What is a heuristic?

A: A heuristic is a best guess approach to solving a problem.

> What is another problem besides the shortest-path problem that requires the use of heuristics?

A: Traveling salesman problem would require heuristics.

> What is the difference between a depth-first search and a breadth-first search?

A: Depth-first search (DFS) searches all the way down a tree to a single leaf first before going up a level and searching other leaves and branches. Breadth-first search (BFS) searches all the children of the root node first before searching the children's children and so forth.

> Explain in your own words what an undirected, a-cyclic, unweighted graph is.

A: Undirected means the nodes are connected without a sequence. A-cyclic means the nodes do not create loops in the connections. Unweighted means the connections between each node does not have a different cost from other connections.

> What kind of graph is a binary search tree?

A: Directed, A-cyclic, unweighted. (Directed because search needs to understand root vs child)

####Programming Questions
For the following questions, describe in words how you could solve the problem and then do so. Use the depiction of the Binary Search Tree to refer to the examples.

Given a Binary Search Tree and a value, write a function that checks to see whether the value exists within the tree.
Example: The value 10 exists in the tree. The value 23 does not exist in the tree.

A:
class Node {
constructor(element) {
    this.value = element;
    this.left = null;
    this.right = null;
  }
}

class BinarySearchTree {
   constructor() {
     this.root = null;
   }

   insertNode(element) {
    let newNode = new Node(element);
    this.addNode(null, this.root, newNode);
   }

   addNode(prevNode, node, newNode) {
    let currentNode = node;
    if (currentNode == null) {
      if (prevNode == null) {
        this.root = newNode
      } else if (prevNode.value > newNode.value) {
        prevNode.left = newNode;
      } else {
        prevNode.right = newNode;
      }
    } else if (currentNode.value < newNode.value) {
      this.addNode(currentNode, currentNode.right, newNode);
    } else {
      this.addNode(currentNode, currentNode.left, newNode);
    }
   }

  searchTree(query) {
    return this.searchBinaryTree(this.root, query);
  }

  searchBinaryTree(node, query) {
     let currentNode = node;
     if (currentNode != null) {
       if (currentNode.value == query) {
         return true;
       } else if (currentNode.value < query) {
         return this.searchBinaryTree(currentNode.right, query);
       } else {
         return this.searchBinaryTree(currentNode.left, query);
       }
     } else {
      return false;
     }
   }

//Given a Binary Search Tree and two nodes, n1 and n2, write a function that finds the distance between the two nodes.
//Example: The distance between the nodes 4 and 10 is 4. The distance between the nodes 8 and 10 is 1. The distance between the nodes 1 and 14 is 4.

//A:

  distanceFromNode(node,query) {
    let currentNode = node;
    if (this.searchBinaryTree(query)) {
      if (currentNode.value == query) {
        return 0;
      } else if (currentNode.value < query) {
        return (1 + this.distanceFromNode(currentNode.right,query));
      } else {
        return (1 + this.distanceFromNode(currentNode.left,query));
      }
    } else {
      return null;
    }
  }

  findLowestCommonAncestor(node,n1,n2) {
    if (node == null) {
      return null;
    } else if (node.value > n1 && node.value > n2) {
      return this.findLowestCommonAncestor(node.left, n1, n2);
    } else if (node.value < n1 && node.value < n2) {
      return this.findLowestCommonAncestor(node.right, n1, n2);
    } else {
    return node;
    }
  }

  distanceBetweenNodes(n1,n2) {
    return (this.distanceFromNode(this.root,n1)
            + this.distanceFromNode(this.root,n2)
            - (2 * this.distanceFromNode(
                this.root,
                this.findLowestCommonAncestor(this.root,n1,n2).value
            )));
  }
}

let tree = new BinarySearchTree();
tree.insertNode(8);
tree.insertNode(11);
tree.insertNode(4);
tree.insertNode(7);
tree.insertNode(14);
console.log(tree.root);
console.log(tree.searchTree(14));
console.log(tree.searchTree(3));
console.log(tree.searchTree(7));
console.log(tree.distanceBetweenNodes(4,7));
console.log(tree.distanceBetweenNodes(4,14));
