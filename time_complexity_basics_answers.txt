####Exercises
> What is time complexity and what is its relation to algorithms?
A: time complexity is the measure of the order of how much time an algorithm would need as the amount of processed data grows

> What is runtime?
A: Runtime is used to describe the amount of time an algorithm takes. Sometimes used synonymously with time complexity

> How is the runtime of an algorithm calculated?
A: To calculate runtime, we can study how many times is the input called and how much that would increase as the input/input size increases.

> Name the six types of algorithm growth rates we saw in this checkpoint and list them in order of most efficient to least efficient. Now Google another algorithmic growth rate not covered and place it in the correct spot in your list.
A:
  1. Constant
  2. Logarithmic
  3. Linear
  4. Log-Linear
  5. Quadratic
  6. Exponential
  7. Factorial

> Choose one of the algorithmic growth rates from the last question and make a comparison to a real-life situation.
A: Philz Coffee baristas making coffee - Linear
  This is linear since they usually make a fresh cup of drip coffee for each and every order. So there is no bulk made coffee to reduce time to logarithmic or additional complexity to increase time.

> Determine the time complexity of the following snippet of code. It is commonly known as a linear search.

FUNCTION linearSearch(array, target)
 FOR each number in the array
   IF number = target THEN
     RETURN true
   END IF
 END FOR
 RETURN false
END FUNCTION

A: O f(n)

> Determine the time complexity of the following snippet of code.

If you get stuck, read through the graphical representation section again.

FUNCTION foo(array)
 FOR each number in the array
   FOR each number in the array
     print "Hello"
   END FOR
 END FOR
END FUNCTION

A: O f(n^2)

> Determine the time complexity of the following snippet of code. It is commonly known as the Fibonacci sequence.

FUNCTION fibonacci(number)
 IF number < 1 THEN
   ERROR
 ELSE IF number = 1 or 2 THEN
   RETURN 1
 ELSE
   CALL fibonacci WITH number - 2 RETURNING twoBack
   CALL fibonacci WITH number - 1 RETURNING oneBack
   RETURN twoBack + oneBack
 END IF
END FUNCTION

A: O f(2^n)

> Out of the code snippets you just saw, which is the most time efficient?
A: linearSearch is most efficient
